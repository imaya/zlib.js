<?xml version="1.0" encoding="utf-8"?>
<project name="project" default="all" basedir="./bin">
  <property name="rootpath" value=".."/>
  <property name="rootdir" location="${rootpath}"/>
  <property name="bin" value="."/>
  <!--
  <property name="level" value="ADVANCED_OPTIMIZATIONS"/>
  -->
  <property name="level" value="PERFORMANCE_OPTIMIZATIONS"/>
  <property name="src" value="${rootpath}/src"/>
  <property name="def" value="${rootpath}/define"/>
  <property name="vendor" value="${rootpath}/vendor"/>
  <property name="compiler" value="${vendor}/google-closure-compiler/compiler.jar"/>
  <property name="closure_primitives" value="${rootpath}/closure-primitives/base.js"/>
  <property name="depswriter" value="${rootpath}/closure-primitives/depswriter.py"/>
  <property name="depend" value="${rootpath}/closure-primitives/deps.js"/>
  <property name="export" value="${rootpath}/export"/>

  <!-- ライセンスとビルドされたファイルをプロパティとして読み込む -->
  <loadfile property="license" srcfile="../LICENSE_min"/>

  <!-- ビルドの事前準備 -->
  <target name="prebuild" description="ビルドの事前準備を行う">
     <mkdir dir="${bin}"/>
  </target>

  <!-- 依存関係を解決する -->
  <target name="deps" description="依存関係を解決する">
    <exec executable="python" failonerror="true">
      <arg line="${depswriter}"/>
      <arg line="--root_with_prefix=&quot;.. ..&quot;"/>
      <arg line="--output_file=${depend}"/>
    </exec>

    <pathconvert property="srcfiles" pathsep=" ">
      <map from="${rootdir}" to="--js .."/>
      <fileset dir="${src}" includes="*.js"/>
    </pathconvert>

    <pathconvert property="exportfiles" pathsep=" ">
      <map from="${rootdir}" to="--js .."/>
      <fileset dir="${export}" includes="*.js"/>
    </pathconvert>
  </target>

  <!-- RawInflate の単体ビルド -->
  <target name="raw_inflate" depends="deps,prebuild" description="Inflate の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="rawinflate.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
      <arg line="--js=${export}/rawinflate.js"/>
    </java>
  </target>

  <!-- RawInflate の単体ビルド -->
  <target name="raw_deflate" depends="deps,prebuild" description="Deflate の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="rawdeflate.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${export}/rawdeflate.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Inflate の単体ビルド -->
  <target name="inflate" depends="deps,prebuild" description="Inflate の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="inflate.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${export}/inflate.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Inflate(Stream版) の単体ビルド -->
  <target name="inflate_stream" depends="deps,prebuild" description="Inflate(Stream版) の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="inflate_stream.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${export}/inflate_stream.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Inflate の単体ビルド -->
  <target name="inflate-concat" depends="deps,prebuild" description="Inflate の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="outfile"/>
    <property name="outfile" value="${bin}/inflate.js"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--compilation_level=WHITESPACE_ONLY"/>
      <arg line="--formatting PRETTY_PRINT"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--output_wrapper='(function() {%output%}).call(this);'"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--js_output_file=${outfile}.tmp"/>
      <arg line="--js=${export}/inflate.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${depend}"/>
      <arg line="${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
    <!-- ライセンスとビルドされたファイルをプロパティとして読み込む -->
    <local name="license"/>
    <loadfile property="license" srcfile="./LICENSE_min"/>
    <local name="output"/>
    <loadfile property="output" srcfile="${outfile}.tmp"/>
    <!-- ライセンスとビルドされたファイルの結合 -->
    <echo file="${outfile}" append="no" message="${license}"/>
    <echo file="${outfile}" append="yes" message="${output}"/>
    <fixcrlf file="${outfile}" eol="unix" eof="remove"/>
    <!-- 一時ファイルの削除 -->
    <delete file="${outfile}.tmp"/>
  </target>

  <!-- Gzip の単体ビルド -->
  <target name="gzip" depends="deps,prebuild" description="Gzip の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="gzip.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='(function() {%output%}).call(this);'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${export}/gzip.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Gunzip の単体ビルド -->
  <target name="gunzip" depends="deps,prebuild" description="Inflate の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="gunzip.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${export}/gunzip.js"/>
      <arg line="--js=${export}/gunzip_member.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Deflate の単体ビルド -->
  <target name="deflate" depends="deps,prebuild" description="Deflate の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="deflate.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${export}/deflate.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Zlib のビルド -->
  <target name="zlib" depends="deps,prebuild" description="リリース版のファイル zlib.min.js を作成する">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="zlib.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${export}/inflate.js"/>
      <arg line="--js=${export}/deflate.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Zlib のビルド -->
  <target name="zlib_and_gzip" depends="deps,prebuild" description="リリース版のファイル zlib_and_gzip.min.js を作成する">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="zlib_and_gzip.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${export}/inflate.js"/>
      <arg line="--js=${export}/deflate.js"/>
      <arg line="--js=${export}/gunzip.js"/>
      <arg line="--js=${export}/gunzip_member.js"/>
      <arg line="--js=${export}/gzip.js"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Node.js 版 Zlib のビルド -->
  <target name="node" depends="deps,prebuild" description="create node.js version">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="node-zlib.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--externs=../node/externs.js"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=../node/exports.js"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Unzip の単体ビルド -->
  <target name="unzip" depends="deps,prebuild" description="Unzip の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="unzip.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${export}/unzip.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- Zip の単体ビルド -->
  <target name="zip" depends="deps,prebuild" description="Zip の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="zip.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${export}/zip.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- CRC32 の単体ビルド -->
  <target name="crc32" depends="deps,prebuild" description="CRC32 の独立ビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="crc32.min.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=${level}"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${export}/crc32.js"/>
      <arg line="${srcfiles}"/>
    </java>
  </target>

  <!-- 全てのビルド(デバッグ) -->
  <target name="pretty" depends="deps,prebuild" description="デバッグ用に pretty print したもののビルドを行う">
    <!-- 出力ファイル名 -->
    <local name="basename"/>
    <property name="basename" value="zlib.pretty.js"/>
    <local name="outfile"/>
    <property name="outfile" value="${bin}/${basename}"/>
    <!-- ビルド(出力先は一時ファイル) -->
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--compilation_level=WHITESPACE_ONLY"/>
      <arg line="--formatting PRETTY_PRINT"/>
      <arg line="--warning_level=VERBOSE"/>
      <arg line="--define=goog.DEBUG=false"/>
      <arg line="--summary_detail_level=3"/>
      <arg line="--language_in=ECMASCRIPT5_STRICT"/>
      <arg line="--source_map_format=V3"/>
      <arg line="--output_wrapper='${license}(function() {%output%}).call(this); //@ sourceMappingURL=${basename}.map'"/>
      <arg line="--js_output_file=${outfile}"/>
      <arg line="--create_source_map=${outfile}.map"/>
      <arg line="--manage_closure_dependencies"/>
      <arg line="--js=${closure_primitives}"/>
      <arg line="--js=${def}/typedarray/hybrid.js"/>
      <arg line="${srcfiles}"/>
      <arg line="${exportfiles}"/>
    </java>
  </target>

  <!-- compiler help -->
  <target name="help">
    <java jar="${compiler}" fork="true" failonerror="true">
      <arg line="--help"/>
    </java>
  </target>

  <!-- 全て作成 -->
  <target name="all" depends="raw_deflate,raw_inflate,zlib,zlib_and_gzip,inflate,inflate_stream,deflate,gzip,gunzip,zip,unzip,node" />

  <!--  削除 -->
  <target name="clean">
    <delete file="${depend}"/>
    <delete dir="${bin}"/>
  </target>

  <!-- リビルド -->
  <target name="rebuild" depends="clean,all"/>
</project>
<!-- vim: set expandtab ts=2 sw=2: -->
